.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "rtcForwardIntersect4/8/16" "3" "" "" "Embree Ray Tracing Kernels 4"
.hy
.SS NAME
.IP
.nf
\f[C]
rtcForwardIntersect4/8/16 - forwards a ray packet to new scene
  from user geometry callback
\f[R]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include <embree4/rtcore.h>

void rtcForwardIntersect4(
  void int* valid,
  const struct RTCIntersectFunctionNArguments* args,
  RTCScene scene,
  struct RTCRay4* ray,
  unsigned int instID
);

void rtcForwardIntersect4(
  void int* valid,
  const struct RTCIntersectFunctionNArguments* args,
  RTCScene scene,
  struct RTCRay4* ray,
  unsigned int instID
);

void rtcForwardIntersect16(
  void int* valid,
  const struct RTCIntersectFunctionNArguments* args,
  RTCScene scene,
  struct RTCRay16* ray,
  unsigned int instID
);
\f[R]
.fi
.SS DESCRIPTION
.PP
The \f[C]rtcForwardIntersect4/8/16\f[R] functions forward the traversal
of a transformed ray packet (\f[C]ray\f[R] argument) into a scene
(\f[C]scene\f[R] argument) from a user geometry callback.
The function can only get invoked from a user geometry callback for a
ray traversal initiated with the \f[C]rtcIntersect4/8/16\f[R] function.
The callback arguments structure of the callback invokation has to get
passed to the ray forwarding (\f[C]args\f[R] argument).
The user geometry callback should instantly terminate after invoking the
\f[C]rtcForwardIntersect4/8/16\f[R] function.
.PP
Only the ray origin and ray direction members of the ray argument are
used for forwarding, all additional ray properties are inherited from
the initial ray traversal invokation of \f[C]rtcIntersect4/8/16\f[R].
.PP
The implementation of the \f[C]rtcForwardIntersect4/8/16\f[R] function
recursively continues the ray traversal into the specified scene and
pushes the provided instance ID (\f[C]instID\f[R] argument) to the
instance ID stack.
Hit information is updated into the ray hit structure passed to the
original \f[C]rtcIntersect4/8/16\f[R] invokation.
.PP
This function can get used to implement user defined instancing using
user geometries, e.g.\ by transforming the ray in a special way, and/or
selecting between different scenes to instantiate.
.PP
When using Embree on the CPU it is possible to recursively invoke
\f[C]rtcIntersect4/8/16\f[R] directly from a user geometry callback.
However, when SYCL is used, recursively tracing rays is not directly
supported, and the \f[C]rtcForwardIntersect4/8/16\f[R] function must be
used.
.PP
For \f[C]rtcForwardIntersect4\f[R] the ray packet must be aligned to 16
bytes, for \f[C]rtcForwardIntersect8\f[R] the alignment must be 32
bytes, and for \f[C]rtcForwardIntersect16\f[R] the alignment must be 64
bytes.
.SS EXIT STATUS
.PP
For performance reasons this function does not do any error checks, thus
will not set any error flags on failure.
.SS SEE ALSO
.PP
[rtcIntersect4/8/16]

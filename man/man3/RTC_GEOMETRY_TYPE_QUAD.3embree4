.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "RTC_GEOMETRY_TYPE_QUAD" "3" "" "" "Embree Ray Tracing Kernels 4"
.hy
.SS NAME
.IP
.nf
\f[C]
RTC_GEOMETRY_TYPE_QUAD - quad geometry type
\f[R]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include <embree4/rtcore.h>

RTCGeometry geometry =
  rtcNewGeometry(device, RTC_GEOMETRY_TYPE_QUAD);
\f[R]
.fi
.SS DESCRIPTION
.PP
Quad meshes are created by passing \f[V]RTC_GEOMETRY_TYPE_QUAD\f[R] to
the \f[V]rtcNewGeometry\f[R] function call.
The quad indices can be specified by setting an index buffer
(\f[V]RTC_BUFFER_TYPE_INDEX\f[R] type) and the quad vertices by setting
a vertex buffer (\f[V]RTC_BUFFER_TYPE_VERTEX\f[R] type).
See \f[V]rtcSetGeometryBuffer\f[R] and
\f[V]rtcSetSharedGeometryBuffer\f[R] for more details on how to set
buffers.
The index buffer contains an array of four 32-bit indices per quad
(\f[V]RTC_FORMAT_UINT4\f[R] format), and the number of primitives is
inferred from the size of that buffer.
The vertex buffer contains an array of single precision \f[V]x\f[R],
\f[V]y\f[R], \f[V]z\f[R] floating point coordinates
(\f[V]RTC_FORMAT_FLOAT3\f[R] format), and the number of vertices is
inferred from the size of that buffer.
The vertex buffer can be at most 16 GB large.
.PP
A quad is internally handled as a pair of two triangles
\f[V]v0,v1,v3\f[R] and \f[V]v2,v3,v1\f[R], with the
\f[V]u\[aq]\f[R]/\f[V]v\[aq]\f[R] coordinates of the second triangle
corrected by \f[V]u = 1-u\[aq]\f[R] and \f[V]v = 1-v\[aq]\f[R] to
produce a quad parametrization where \f[V]u\f[R] and \f[V]v\f[R] are in
the range 0 to 1.
Thus the parametrization of a quad uses the first vertex \f[V]p0\f[R] as
base point, and the vector \f[V]p1 - p0\f[R] as \f[V]u\f[R]-direction,
and \f[V]p3 - p0\f[R] as v-direction.
Thus vertex attributes \f[V]t0,t1,t2,t3\f[R] can be bilinearly
interpolated over the quadrilateral the following way:
.IP
.nf
\f[C]
t_uv = (1-v)((1-u)*t0 + u*t1) + v*((1-u)*t3 + u*t2)
\f[R]
.fi
.PP
Mixed triangle/quad meshes are supported by encoding a triangle as a
quad, which can be achieved by replicating the last triangle vertex
(\f[V]v0,v1,v2\f[R] -> \f[V]v0,v1,v2,v2\f[R]).
This way the second triangle is a line (which can never get hit), and
the parametrization of the first triangle is compatible with the
standard triangle parametrization.
.PP
A quad whose vertices are laid out counter-clockwise has its geometry
normal pointing upwards outside the front face, like illustrated in the
following picture.
.IP
.nf
\f[C]
\f[R]
.fi
.PP
For multi-segment motion blur, the number of time steps must be first
specified using the \f[V]rtcSetGeometryTimeStepCount\f[R] call.
Then a vertex buffer for each time step can be set using different
buffer slots, and all these buffers must have the same stride and size.
.SS EXIT STATUS
.PP
On failure \f[V]NULL\f[R] is returned and an error code is set that can
be queried using \f[V]rtcGetDeviceError\f[R].
.SS SEE ALSO
.PP
[rtcNewGeometry]

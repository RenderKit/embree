.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "rtcBuildBVH" "3" "" "" "Embree Ray Tracing Kernels 4"
.hy
.SS NAME
.IP
.nf
\f[C]
rtcBuildBVH - builds a BVH
\f[R]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include <embree4/rtcore.h>

struct RTC_ALIGN(32) RTCBuildPrimitive
{
  float lower_x, lower_y, lower_z; 
  unsigned int geomID;
  float upper_x, upper_y, upper_z;
  unsigned int primID;
};

typedef void* (*RTCCreateNodeFunction) (
  RTCThreadLocalAllocator allocator,
  unsigned int childCount,
  void* userPtr
);

typedef void (*RTCSetNodeChildrenFunction) (
  void* nodePtr,
  void** children,
  unsigned int childCount,
  void* userPtr
);

typedef void (*RTCSetNodeBoundsFunction) (
  void* nodePtr,
  const struct RTCBounds** bounds,
  unsigned int childCount,
  void* userPtr
);

typedef void* (*RTCCreateLeafFunction) (
  RTCThreadLocalAllocator allocator,
  const struct RTCBuildPrimitive* primitives,
  size_t primitiveCount,
  void* userPtr
);

typedef void (*RTCSplitPrimitiveFunction) (
  const struct RTCBuildPrimitive* primitive,
  unsigned int dimension,
  float position,
  struct RTCBounds* leftBounds,
  struct RTCBounds* rightBounds,
  void* userPtr
);

typedef bool (*RTCProgressMonitorFunction)(
  void* userPtr, double n
);

enum RTCBuildFlags
{
  RTC_BUILD_FLAG_NONE,
  RTC_BUILD_FLAG_DYNAMIC
};

struct RTCBuildArguments
{
  size_t byteSize;

  enum RTCBuildQuality buildQuality;
  enum RTCBuildFlags buildFlags;
  unsigned int maxBranchingFactor;
  unsigned int maxDepth;
  unsigned int sahBlockSize;
  unsigned int minLeafSize;
  unsigned int maxLeafSize;
  float traversalCost;
  float intersectionCost;

  RTCBVH bvh;
  struct RTCBuildPrimitive* primitives;
  size_t primitiveCount;
  size_t primitiveArrayCapacity;
  
  RTCCreateNodeFunction createNode;
  RTCSetNodeChildrenFunction setNodeChildren;
  RTCSetNodeBoundsFunction setNodeBounds;
  RTCCreateLeafFunction createLeaf;
  RTCSplitPrimitiveFunction splitPrimitive;
  RTCProgressMonitorFunction buildProgress;
  void* userPtr;
};

struct RTCBuildArguments rtcDefaultBuildArguments();

void* rtcBuildBVH(
  const struct RTCBuildArguments* args
);
\f[R]
.fi
.SS DESCRIPTION
.PP
The \f[V]rtcBuildBVH\f[R] function can be used to build a BVH in a
user-defined format over arbitrary primitives.
All arguments to the function are provided through the
\f[V]RTCBuildArguments\f[R] structure.
The first member of that structure must be set to the size of the
structure in bytes (\f[V]bytesSize\f[R] member) which allows future
extensions of the structure.
It is recommended to initialize the build arguments structure using the
\f[V]rtcDefaultBuildArguments\f[R] function.
.PP
The \f[V]rtcBuildBVH\f[R] function gets passed the BVH to build
(\f[V]bvh\f[R] member), the array of primitives (\f[V]primitives\f[R]
member), the capacity of that array (\f[V]primitiveArrayCapacity\f[R]
member), the number of primitives stored inside the array
(\f[V]primitiveCount\f[R] member), callback function pointers, and a
user-defined pointer (\f[V]userPtr\f[R] member) that is passed to all
callback functions when invoked.
The \f[V]primitives\f[R] array can be freed by the application after the
BVH is built.
All callback functions are typically called from multiple threads, thus
their implementation must be thread-safe.
.PP
Four callback functions must be registered, which are invoked during
build to create BVH nodes (\f[V]createNode\f[R] member), to set the
pointers to all children (\f[V]setNodeChildren\f[R] member), to set the
bounding boxes of all children (\f[V]setNodeBounds\f[R] member), and to
create a leaf node (\f[V]createLeaf\f[R] member).
.PP
The function pointer to the primitive split function
(\f[V]splitPrimitive\f[R] member) may be \f[V]NULL\f[R], however, then
no spatial splitting in high quality mode is possible.
The function pointer used to report the build progress
(\f[V]buildProgress\f[R] member) is optional and may also be
\f[V]NULL\f[R].
.PP
Further, some build settings are passed to configure the BVH build.
Using the build quality settings (\f[V]buildQuality\f[R] member), one
can select between a faster, low quality build which is good for dynamic
scenes, and a standard quality build for static scenes.
One can also specify the desired maximum branching factor of the BVH
(\f[V]maxBranchingFactor\f[R] member), the maximum depth the BVH should
have (\f[V]maxDepth\f[R] member), the block size for the SAH heuristic
(\f[V]sahBlockSize\f[R] member), the minimum and maximum leaf size
(\f[V]minLeafSize\f[R] and \f[V]maxLeafSize\f[R] member), and the
estimated costs of one traversal step and one primitive intersection
(\f[V]traversalCost\f[R] and \f[V]intersectionCost\f[R] members).
When enabling the \f[V]RTC_BUILD_FLAG_DYNAMIC\f[R] build flags
(\f[V]buildFlags\f[R] member), re-build performance for dynamic scenes
is improved at the cost of higher memory requirements.
.PP
To spatially split primitives in high quality mode, the builder needs
extra space at the end of the build primitive array to store split
primitives.
The total capacity of the build primitive array is passed using the
\f[V]primitiveArrayCapacity\f[R] member, and should be about twice the
number of primitives when using spatial splits.
.PP
The \f[V]RTCCreateNodeFunc\f[R] and \f[V]RTCCreateLeafFunc\f[R]
callbacks are passed a thread local allocator object that should be used
for fast allocation of nodes using the \f[V]rtcThreadLocalAlloc\f[R]
function.
We strongly recommend using this allocation mechanism, as alternative
approaches like standard \f[V]malloc\f[R] can be over 10Ã— slower.
The allocator object passed to the create callbacks may be used only
inside the current thread.
Memory allocated using \f[V]rtcThreadLocalAlloc\f[R] is automatically
freed when the \f[V]RTCBVH\f[R] object is deleted.
If you use your own memory allocation scheme you have to free the memory
yourself when the \f[V]RTCBVH\f[R] object is no longer used.
.PP
The \f[V]RTCCreateNodeFunc\f[R] callback additionally gets the number of
children for this node in the range from 2 to
\f[V]maxBranchingFactor\f[R] (\f[V]childCount\f[R] argument).
.PP
The \f[V]RTCSetNodeChildFunc\f[R] callback function gets a pointer to
the node as input (\f[V]nodePtr\f[R] argument), an array of pointers to
the children (\f[V]childPtrs\f[R] argument), and the size of this array
(\f[V]childCount\f[R] argument).
.PP
The \f[V]RTCSetNodeBoundsFunc\f[R] callback function gets a pointer to
the node as input (\f[V]nodePtr\f[R] argument), an array of pointers to
the bounding boxes of the children (\f[V]bounds\f[R] argument), and the
size of this array (\f[V]childCount\f[R] argument).
.PP
The \f[V]RTCCreateLeafFunc\f[R] callback additionally gets an array of
primitives as input (\f[V]primitives\f[R] argument), and the size of
this array (\f[V]primitiveCount\f[R] argument).
The callback should read the \f[V]geomID\f[R] and \f[V]primID\f[R]
members from the passed primitives to construct the leaf.
.PP
The \f[V]RTCSplitPrimitiveFunc\f[R] callback is invoked in high quality
mode to split a primitive (\f[V]primitive\f[R] argument) at the
specified position (\f[V]position\f[R] argument) and dimension
(\f[V]dimension\f[R] argument).
The callback should return bounds of the clipped left and right parts of
the primitive (\f[V]leftBounds\f[R] and \f[V]rightBounds\f[R]
arguments).
.PP
The \f[V]RTCProgressMonitorFunction\f[R] callback function is called
with the estimated completion rate \f[V]n\f[R] in the range [0,1].
Returning \f[V]true\f[R] from the callback lets the build continue;
returning \f[V]false\f[R] cancels the build.
.SS EXIT STATUS
.PP
On failure an error code is set that can be queried using
\f[V]rtcGetDeviceError\f[R].
.SS SEE ALSO
.PP
[rtcNewBVH]

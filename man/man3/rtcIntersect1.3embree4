.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "rtcIntersect1" "3" "" "" "Embree Ray Tracing Kernels 4"
.hy
.SS NAME
.IP
.nf
\f[C]
rtcIntersect1 - finds the closest hit for a single ray
\f[R]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include <embree4/rtcore.h>

void rtcIntersect1(
  RTCScene scene,
  struct RTCRayHit* rayhit
  struct RTCIntersectArguments* args = NULL
);
\f[R]
.fi
.SS DESCRIPTION
.PP
The \f[V]rtcIntersect1\f[R] function finds the closest hit of a single
ray (\f[V]rayhit\f[R] argument) with the scene (\f[V]scene\f[R]
argument).
The provided ray/hit structure contains the ray to intersect and some
hit output fields that are filled when a hit is found.
The passed optional arguments struct (\f[V]args\f[R] argument) can get
used for advanced use cases, see section [rtcInitIntersectArguments] for
more details.
.PP
To trace a ray, the user has to initialize the ray origin (\f[V]org\f[R]
ray member), ray direction (\f[V]dir\f[R] ray member), ray segment
(\f[V]tnear\f[R], \f[V]tfar\f[R] ray members), ray mask (\f[V]mask\f[R]
ray member), and set the ray flags to \f[V]0\f[R] (\f[V]flags\f[R] ray
member).
The ray time (\f[V]time\f[R] ray member) must be initialized to a value
in the range $[0, 1].
The ray segment has to be in the range [0,âˆž], thus ranges that start
behind the ray origin are not valid, but ranges can reach to infinity.
See Section [RTCRay] for the ray layout description.
.PP
The geometry ID (\f[V]geomID\f[R] hit member) of the hit data must be
initialized to \f[V]RTC_INVALID_GEOMETRY_ID\f[R] (-1).
.PP
When no intersection is found, the ray/hit data is not updated.
When an intersection is found, the hit distance is written into the
\f[V]tfar\f[R] member of the ray and all hit data is set, such as
unnormalized geometry normal in object space (\f[V]Ng\f[R] hit member),
local hit coordinates (\f[V]u\f[R], \f[V]v\f[R] hit member), instance ID
stack (\f[V]instID\f[R] hit member), geometry ID (\f[V]geomID\f[R] hit
member), and primitive ID (\f[V]primID\f[R] hit member).
See Section [RTCHit] for the hit layout description.
.PP
If the instance ID stack has a prefix of values not equal to
\f[V]RTC_INVALID_GEOMETRY_ID\f[R], the instance ID on each level
corresponds to the geometry ID of the hit instance of the higher-level
scene, the geometry ID corresponds to the hit geometry inside the hit
instanced scene, and the primitive ID corresponds to the n-th primitive
of that geometry.
.PP
If level 0 of the instance ID stack is equal to
\f[V]RTC_INVALID_GEOMETRY_ID\f[R], the geometry ID corresponds to the
hit geometry inside the top-level scene, and the primitive ID
corresponds to the n-th primitive of that geometry.
.PP
The implementation makes no guarantees that primitives whose hit
distance is exactly at (or very close to) \f[V]tnear\f[R] or
\f[V]tfar\f[R] are hit or missed.
If you want to exclude intersections at \f[V]tnear\f[R] just pass a
slightly enlarged \f[V]tnear\f[R], and if you want to include
intersections at \f[V]tfar\f[R] pass a slightly enlarged \f[V]tfar\f[R].
.IP
.nf
\f[C]
\f[R]
.fi
.PP
The ray/hit structure must be aligned to 16 bytes.
.SS EXIT STATUS
.PP
For performance reasons this function does not do any error checks, thus
will not set any error flags on failure.
.SS SEE ALSO
.PP
[rtcOccluded1], [rtcIntersect4/8/16], [RTCRayHit],
[rtcInitIntersectArguments]
